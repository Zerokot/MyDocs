		Эпигаф: "тяжела и неказиста жизнь простого программиста..."	
Казалось бы да, (все должно быть ясно и понятно из мануала, бери и делай!) но нет!

Проблема: 
При включении библиотеки LVGL в проект ESP-IDF в качестве компонента
происходит подлое игнорирование пользовательского lv_conf.h. 

Следствия:   
Совешенно странное игноривание настроек (бесит страшно!), приводящее к наружению как логики настроек проекта, 
так и его линковки (что и понятно, хотя в начале было совершенно непонятно), 
поскольку выяснилось, что не открываются блоки, закрытые директивами #if ... #endif, хотя, казалось бы, 
все дефайны-определения внесены в файл lv_conf.h!

ВАЖНЫЕ ДОПОЛНЕНИЯ.
1) В документации к lvgl есть несколько запутанных объяснений к настройкам, 
связанных с конфигурацией и в основном недокументированных.
В частности, говорится, что есть такой параметр как LV_CONF_SKIP=y, который установлен как yзначение по умолчанию в kconfig.
2) Как написано в самом kconfig:
   # Define CONFIG_LV_CONF_SKIP чтобы иметь возможность пользоваться LVGL
   # без файла lv_conf.h , будет использоваться то, что определено в lv_conf_internal.h
   # lv_conf_kconfig.h files are used instead, что надо понимать, как "используйте вместо этого".
3) Имейте в виду, что при использовании lvgl в качестве компонента в ESP-IDF проектах 
   файл конфигурации lv_conf.h не должен находится в папке lvgl, 
   о чем упоминается в нескольких местах, включая комментарии к коду.
4) Вывод. Компонент скачанный с Гита, не надо трогать вообще. Настраивать его можно только в своем коде и в меню конфигурации.
   Но есть одно но. О чем ниже.

Борьба с этим злом завела на Гитхаб: https://github.com/lvgl/lvgl/issues/3441
и вот что я понял
ГЛАВНОЕ:
По мнению sukesh-ak (очень уважаемого), основная проблема не в ESP-IDF, 
а в настройке по умолчанию самой lvgl, где настройки из файла конфигурации компонента LVGL - kconfig
(он находится в папке lvgl) напрочь ПЕРЕБИВАЮТ (накрывают, херят - как угодно) настройки из пользовательского lv_conf.h.
И с этим ничего не поделать, просто смириться и жить.

Sukesh-ak предложил свой обходной путь — удалить/переименовать kconfig внутри папки lvgl,
а директивами компилятора:
idf_build_set_property(COMPILE_OPTIONS "-DLV_CONF_INCLUDE_SIMPLE=1" APPEND)
idf_build_set_property(COMPILE_OPTIONS "-DLV_CONF_PATH= ${CMAKE_SOURCE_DIR}/main/lv_conf.h" APPEND)
силой побороть проблему.

Но kconfig все равно остается проблемой!
Проблема в том, что CONFIG_LV_CONF_SKIP=y (пропустить файл конфигурации)
компилятором не переопределяется, поэтому он всегда игнорирует пользовательскую конфигурацию!

Кроме того, он не является частью меню menuconfig (раньше, сейчас добавлен), поэтому его нельзя (было) отключить вообще!
Это потому, что по умолчанию настройка в kconfig для LV_CONF_SKIP
не имеет описания, и следовательно, это не дает этому пункту отображаться в параметрах меню конфигурации.
И поэтому его невозможно отключить! (хотя это уже исправлено в последних версиях lvgl)

config LV_CONF_SKIP
        bool
        default y

дописав "Uncheck this to use custom lv_conf.h" в качестве лейбла, этот пункт будет возможно отобразить.
config LV_CONF_SKIP
        bool "Uncheck this to use custom lv_conf.h" (Снимите этот флажок, чтобы использовать пользовательский файл lv_conf.h.)
        default y

Но что интересно, после всех танцев с бубном приоритет kconfig остается! 
Т.е. чтобы включить какую-либо фичу,
например обработку "Enable publisher subscriberbased messaging system" (LV_USE_MSG) 
(Включить систему обмена сообщениями на основе подписчиков-издателей) надо поставить в конфиге галочку,
а запись в lv_conf.h
#define LV_USE_MSG 1 
будет по прежему "до лампочки"...
Странно все это.

Почему вообще возникла эта дискуссия? Просто какой-то чел заморочился тем, что он собирал код под разные чипы ESP32, ESP32s3 
или изменяя всего одну настройку (например шрифт) каждый раз компилировал код "с чистого листа", 
потому что меняется конфигурация проекта. Ему это не понравилось.
А если бы все сводилось к изменению пользовательского кода, в нашем случае хышки lv_conf.h
вся перекомпиляция занимала бы пару секунд! 
Я не настолько нетерпелив, но идиотское (и не описанное!) поведение настроек отобрало у меня немало времени.

Вот и все. 


   

 

